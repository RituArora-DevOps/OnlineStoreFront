@{
    ViewData["Title"] = "Payments Management";
    var payments = ViewBag.Payments as IEnumerable<dynamic>;
    var cancelledPayments = ViewBag.CancelledPayments as IEnumerable<dynamic>;
}

@Html.AntiForgeryToken()

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="text-black">All Orders & Payments</h2>
        <a href="@Url.Action("Dashboard", "Admin")" class="btn btn-outline-secondary">
            <i class="fas fa-arrow-left"></i> Back to Dashboard
        </a>
    </div>

    <!-- Active Orders -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">Active Orders & Payments</h5>
        </div>
        <div class="card-body p-0">
            @if (payments != null && payments.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Order ID</th>
                                <th>Customer ID</th>
                                <th>Amount</th>
                                <th>Payment Method</th>
                                <th>Order Date</th>
                                <th>Payment Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in payments)
                            {
                                <tr>
                                    <td>
                                        <a href="@Url.Action("OrderDetails", "Customer", new { id = payment.OrderId })" 
                                           class="text-decoration-none">
                                            #@payment.OrderId
                                        </a>
                                    </td>
                                    <td>@payment.CustomerId</td>
                                    <td>@payment.Amount.ToString("C")</td>
                                    <td>@payment.PaymentMethod</td>
                                    <td>@payment.OrderDate.ToString("MMM dd, yyyy")</td>
                                    <td>@payment.CreatedDate.ToString("MMM dd, yyyy")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="@Url.Action("OrderDetails", "Admin", new { id = payment.OrderId })" 
                                               class="btn btn-sm btn-outline-primary">
                                                View Details
                                            </a>
                                            <button class="btn btn-sm btn-outline-danger" 
                                                    onclick="confirmRefund(@payment.OrderId, @payment.Amount, '@payment.PaymentMethod')">
                                                Cancel & Refund
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <h4 class="text-muted">No Active Orders Found</h4>
                    <p class="text-muted">No active order records are available at this time.</p>
                </div>
            }
        </div>
    </div>

    <!-- Refunded Orders -->
    @if (cancelledPayments != null && cancelledPayments.Any())
    {
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Refunded Orders</h5>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Order ID</th>
                                <th>Customer ID</th>
                                <th>Amount</th>
                                <th>Payment Method</th>
                                <th>Order Date</th>
                                <th>Refund Date</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in cancelledPayments)
                            {
                                <tr>
                                    <td>
                                        <a href="@Url.Action("OrderDetails", "Customer", new { id = payment.OrderId })" 
                                           class="text-decoration-none">
                                            #@payment.OrderId
                                        </a>
                                    </td>
                                    <td>@payment.CustomerId</td>
                                    <td>@payment.Amount.ToString("C")</td>
                                    <td>@payment.PaymentMethod</td>
                                    <td>@payment.OrderDate.ToString("MMM dd, yyyy")</td>
                                    <td>@payment.CreatedDate.ToString("MMM dd, yyyy")</td>
                                    <td><span class="badge bg-danger">Refunded</span></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Refund Confirmation Modal -->
<div class="modal fade" id="refundModal" tabindex="-1" aria-labelledby="refundModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="refundModalLabel">Confirm Refund</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to cancel and refund this payment?</p>
                <div class="card">
                    <div class="card-body">
                        <h6>Payment Details:</h6>
                        <p><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
                        <p><strong>Amount:</strong> <span id="modalAmount"></span></p>
                        <p><strong>Payment Method:</strong> <span id="modalPaymentMethod"></span></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmRefundBtn">
                    <i class="fas fa-undo"></i> Confirm Refund
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    h2, h5 {
        color: #000000 !important;
    }
</style>

<script>
let currentRefundData = {};

function confirmRefund(orderId, amount, paymentMethod) {
    console.log('Refund function called:', orderId, amount, paymentMethod);
    
    // Store the refund data for later use
    currentRefundData = {
        orderId: orderId,
        amount: amount,
        paymentMethod: paymentMethod
    };
    
    // Populate the modal with the payment details
    document.getElementById('modalOrderId').textContent = '#' + orderId;
    document.getElementById('modalAmount').textContent = '$' + amount.toFixed(2);
    document.getElementById('modalPaymentMethod').textContent = paymentMethod;
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('refundModal'));
    modal.show();
}

// Handle the confirm refund button click
document.getElementById('confirmRefundBtn').addEventListener('click', function() {
    console.log('User confirmed refund via modal');
    
    // Get the anti-forgery token
    const token = document.querySelector('input[name="__RequestVerificationToken"]');
    if (!token) {
        alert('Security token not found. Please refresh the page and try again.');
        return;
    }
    
    // Disable the button to prevent double-clicks
    this.disabled = true;
    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
    
    // Call the refund action
    fetch('@Url.Action("RefundPayment", "Admin")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token.value
        },
        body: JSON.stringify(currentRefundData)
    })
    .then(response => {
        console.log('Response received:', response.status);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Response data:', data);
        if (data.success) {
            // Show success message
            const modal = bootstrap.Modal.getInstance(document.getElementById('refundModal'));
            modal.hide();
            
            // Show success alert
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.innerHTML = `
                <i class="fas fa-check-circle"></i>
                <strong>Success!</strong> Payment refunded successfully!
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
            
            // Refresh the page after a short delay
            setTimeout(() => {
                location.reload();
            }, 2000);
        } else {
            alert('Error refunding payment: ' + data.message);
            // Re-enable the button
            this.disabled = false;
            this.innerHTML = '<i class="fas fa-undo"></i> Confirm Refund';
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while processing the refund: ' + error.message);
        // Re-enable the button
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-undo"></i> Confirm Refund';
    });
});
</script>
