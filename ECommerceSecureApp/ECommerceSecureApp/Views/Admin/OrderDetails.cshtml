@model ECommerceSecureApp.Models.ViewModels.OrderHistoryVM
@{
    ViewData["Title"] = "Order Details - Admin";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>Order Details #@Model.OrderId - Admin View</h2>
        <div>
            <a href="@Url.Action("Dashboard", "Admin")" class="btn btn-outline-secondary me-2">
                <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
            <a href="@Url.Action("Payments", "Admin")" class="btn btn-outline-primary">
                <i class="fas fa-credit-card"></i> View Payments
            </a>
        </div>
    </div>

    <div class="row">
        <!-- Order Information -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Order Information</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <strong>Order ID:</strong> #@Model.OrderId
                    </div>
                    <div class="mb-3">
                        <strong>Customer ID:</strong> @Model.ExternalUserId
                    </div>
                    <div class="mb-3">
                        <strong>Order Date:</strong> @Model.CreatedDate.ToString("MMMM dd, yyyy 'at' h:mm tt")
                    </div>
                    @if (Model.ModifiedDate.HasValue)
                    {
                        <div class="mb-3">
                            <strong>Last Updated:</strong> @Model.ModifiedDate.Value.ToString("MMMM dd, yyyy 'at' h:mm tt")
                        </div>
                    }
                    <div class="mb-3">
                        <strong>Status:</strong> 
                        <span class="badge @(Model.OrderStatus.ToLower() switch {
                            "pending" => "bg-warning",
                            "processing" => "bg-info", 
                            "shipped" => "bg-primary",
                            "delivered" => "bg-success",
                            "cancelled" => "bg-danger",
                            _ => "bg-secondary"
                        })">@Model.OrderStatus</span>
                    </div>
                    @if (Model.Payment != null)
                    {
                        <div class="mb-3">
                            <strong>Payment Method:</strong> 
                            @if (Model.Payment.CreditCardPayment != null)
                            {
                                <span>Credit Card (****@Model.Payment.CreditCardPayment.Last4)</span>
                            }
                            else if (Model.Payment.PayPalPayment != null)
                            {
                                <span>PayPal (@Model.Payment.PayPalPayment.PayPalEmail)</span>
                            }
                            else
                            {
                                <span>Unknown Payment Method</span>
                            }
                        </div>
                        <div class="mb-3">
                            <strong>Payment Amount:</strong> @Model.Payment.Amount.ToString("C")
                        </div>
                        <div class="mb-3">
                            <strong>Payment Date:</strong> @Model.Payment.CreatedDate.ToString("MMMM dd, yyyy 'at' h:mm tt")
                        </div>
                    }
                    else
                    {
                        <div class="mb-3">
                            <strong>Payment:</strong> <span class="text-muted">No payment information available</span>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Order Items -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Order Items</h5>
                </div>
                <div class="card-body p-0">
                    @if (Model.OrderItems.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Product</th>
                                        <th class="text-center">Quantity</th>
                                        <th class="text-end">Price</th>
                                        <th class="text-end">Subtotal</th>
                                        <th class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.OrderItems)
                                    {
                                        <tr>
                                            <td>
                                                <div class="d-flex align-items-center">
                                                    @if (item.HasImage)
                                                    {
                                                        <img src="@Url.Action("ProductImage", "Picture", new { productId = item.ProductId })" 
                                                             alt="@item.ProductName" class="me-3" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
                                                    }
                                                    else
                                                    {
                                                        <img src="~/images/no-image.png" alt="No Image" 
                                                             class="me-3" style="width: 50px; height: 50px; object-fit: cover; border-radius: 4px;">
                                                    }
                                                    <div>
                                                        <div class="fw-medium">@item.ProductName</div>
                                                        <small class="text-muted">Product ID: @item.ProductId</small>
                                                    </div>
                                                </div>
                                            </td>
                                            <td class="text-center">@item.Quantity</td>
                                            <td class="text-end">@item.PriceAtOrder.ToString("C")</td>
                                            <td class="text-end fw-medium">@item.Subtotal.ToString("C")</td>
                                            <td class="text-center">
                                                <a href="@Url.Action("Details", "Products", new { id = item.ProductId })" 
                                                   class="btn btn-outline-primary btn-sm">
                                                    <i class="fas fa-eye"></i> View Product
                                                </a>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="text-muted">No items found for this order.</p>
                        </div>
                    }
                </div>
                <div class="card-footer">
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="h5 mb-0">Total:</span>
                        <span class="h4 text-primary mb-0">@Model.Total.ToString("C")</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Admin Actions -->
    @if (Model.Payment != null && Model.OrderStatus != "Cancelled")
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Admin Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex gap-2">
                            <button class="btn btn-danger" 
                                    onclick="confirmRefund(@Model.OrderId, @Model.Total, '@(Model.Payment.CreditCardPayment != null ? "Credit Card" : Model.Payment.PayPalPayment != null ? "PayPal" : "Unknown")')">
                                <i class="fas fa-undo"></i> Cancel & Refund Order
                            </button>
                            <a href="@Url.Action("Index", "Review")" class="btn btn-outline-info">
                                <i class="fas fa-star"></i> View Reviews
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Refund Confirmation Modal -->
<div class="modal fade" id="refundModal" tabindex="-1" aria-labelledby="refundModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="refundModalLabel">Confirm Refund</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    <strong>Warning:</strong> This action cannot be undone.
                </div>
                <p>Are you sure you want to cancel and refund this payment?</p>
                <div class="card">
                    <div class="card-body">
                        <h6>Payment Details:</h6>
                        <p><strong>Order ID:</strong> <span id="modalOrderId"></span></p>
                        <p><strong>Amount:</strong> <span id="modalAmount"></span></p>
                        <p><strong>Payment Method:</strong> <span id="modalPaymentMethod"></span></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmRefundBtn">
                    <i class="fas fa-undo"></i> Confirm Refund
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    h2, h5 {
        color: #000000 !important;
    }
    
    .card-title {
        color: #000000 !important;
    }
    
    .table th {
        color: #000000 !important;
        font-weight: 600;
    }
</style>

<script>
let currentRefundData = {};

function confirmRefund(orderId, amount, paymentMethod) {
    console.log('Refund function called:', orderId, amount, paymentMethod);
    
    // Store the refund data for later use
    currentRefundData = {
        orderId: orderId,
        amount: amount,
        paymentMethod: paymentMethod
    };
    
    // Populate the modal with the payment details
    document.getElementById('modalOrderId').textContent = '#' + orderId;
    document.getElementById('modalAmount').textContent = '$' + amount.toFixed(2);
    document.getElementById('modalPaymentMethod').textContent = paymentMethod;
    
    // Show the modal
    const modal = new bootstrap.Modal(document.getElementById('refundModal'));
    modal.show();
}

// Handle the confirm refund button click
document.getElementById('confirmRefundBtn').addEventListener('click', function() {
    console.log('User confirmed refund via modal');
    
    // Get the anti-forgery token
    const token = document.querySelector('input[name="__RequestVerificationToken"]');
    if (!token) {
        alert('Security token not found. Please refresh the page and try again.');
        return;
    }
    
    // Disable the button to prevent double-clicks
    this.disabled = true;
    this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
    
    // Call the refund action
    fetch('@Url.Action("RefundPayment", "Admin")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'RequestVerificationToken': token.value
        },
        body: JSON.stringify(currentRefundData)
    })
    .then(response => {
        console.log('Response received:', response.status);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        console.log('Response data:', data);
        if (data.success) {
            // Show success message
            const modal = bootstrap.Modal.getInstance(document.getElementById('refundModal'));
            modal.hide();
            
            // Show success alert
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.innerHTML = `
                <i class="fas fa-check-circle"></i>
                <strong>Success!</strong> Payment refunded successfully!
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.querySelector('.container').insertBefore(alertDiv, document.querySelector('.container').firstChild);
            
            // Refresh the page after a short delay
            setTimeout(() => {
                location.reload();
            }, 2000);
        } else {
            alert('Error refunding payment: ' + data.message);
            // Re-enable the button
            this.disabled = false;
            this.innerHTML = '<i class="fas fa-undo"></i> Confirm Refund';
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while processing the refund: ' + error.message);
        // Re-enable the button
        this.disabled = false;
        this.innerHTML = '<i class="fas fa-undo"></i> Confirm Refund';
    });
});
</script>
